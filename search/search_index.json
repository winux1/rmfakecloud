{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome rmfakecloud is a clone of the cloud sync the remarkable tablet is using, in case you want to sync/backup your files and have full control of the hosting/storage environment. Features File synchronization (compatible with revisions 1.0 and 1.5) Integrations with external files sources (using webdav or with a dedicated directory on local file system, instead of Google Drive and Dropbox) Send document by email Handwriting recognition Unlock the screen sharing feature (but it doesn't work remotely, you should use the app through USB) It comes with a very basic web interface that let you: Register user Connect to your account Generate one time code for device registration View synchronized files Download PDF of the synchronized files Upload new documents Please note that this project is under development and there are many features that requires to tweak configuration files directly. Wish List Here is a list of tasks that still need to be accomplished: UI: specify folder on upload add/remove users move files around rename files realtime notifications document preview archive / restore documents share files between users refactoring sent emails history add message broker add db add blob storage","title":"Home"},{"location":"#welcome","text":"rmfakecloud is a clone of the cloud sync the remarkable tablet is using, in case you want to sync/backup your files and have full control of the hosting/storage environment.","title":"Welcome"},{"location":"#features","text":"File synchronization (compatible with revisions 1.0 and 1.5) Integrations with external files sources (using webdav or with a dedicated directory on local file system, instead of Google Drive and Dropbox) Send document by email Handwriting recognition Unlock the screen sharing feature (but it doesn't work remotely, you should use the app through USB) It comes with a very basic web interface that let you: Register user Connect to your account Generate one time code for device registration View synchronized files Download PDF of the synchronized files Upload new documents Please note that this project is under development and there are many features that requires to tweak configuration files directly.","title":"Features"},{"location":"#wish-list","text":"Here is a list of tasks that still need to be accomplished: UI: specify folder on upload add/remove users move files around rename files realtime notifications document preview archive / restore documents share files between users refactoring sent emails history add message broker add db add blob storage","title":"Wish List"},{"location":"browser-extension/","text":"Browser Extension Support As of commit a62153e , the Read on reMarkable Chrome extension is supported by rmfakecloud. Of course, the extension needs to be modified to connect to your cloud. Install the extension from the Chrome Web Store. Find the extension directory: Go to chrome://extensions in your browser, find \"Read on reMarkable\" in the list, and take note of the ID. Mine is bfhkfdnddlhfippjbflipboognpdpoeh . Go to chrome://version in your browser, and take note of the \"Profile Path\". Mine is /home/murchu27/.config/BraveSoftware/Brave-Browser/Default (Linux). Your extension directory will be {Profile Path}/Extensions/{ID}/{some version number} . Mine is /home/murchu27/.config/BraveSoftware/Brave-Browser/Default/Extensions/bfhkfdnddlhfippjbflipboognpdpoeh/1.2.0_0 . Within the extension directory, replace any instances of https://internal.cloud.remarkable.com and https://webapp-production-dot-remarkable-production.appspot.com/ with the URL of your cloud (same as the STORAGE_URL used by the tablet). You will need to do this in manifest.json , and any of the .js files. If you are using Linux, you can save the below script as, e.g., rmfakecloud-patch.sh . mycloud=$1 find ./ -type f -exec sed -i \"s/https:\\/\\/internal.cloud.remarkable.com/$mycloud/g\" {} \\; find ./ -type f -exec sed -i \"s/https:\\/\\/webapp-production-dot-remarkable-production.appspot.com/$mycloud/g\" {} \\; Make this script executable with chmod +x rmfakecloud-patch.sh . Run the script, passing in the URL of your cloud, e.g., ./rmfakecloud-patch.sh http://mycloud.com . Reload the extension in your browser: Go to chrome://extensions in your browser. Enable \"Developer mode\" using the toggle at the top right. Click the newly appeared \"Load unpacked\" button, a dialogue box will open. Navigate to the extension directory (the same one as in the step above), and click \"Open\". Try using the extension. Webpages should be sent to your tablet! See #67 for the original discussion of this feature.","title":"Browser Extension"},{"location":"browser-extension/#browser-extension-support","text":"As of commit a62153e , the Read on reMarkable Chrome extension is supported by rmfakecloud. Of course, the extension needs to be modified to connect to your cloud. Install the extension from the Chrome Web Store. Find the extension directory: Go to chrome://extensions in your browser, find \"Read on reMarkable\" in the list, and take note of the ID. Mine is bfhkfdnddlhfippjbflipboognpdpoeh . Go to chrome://version in your browser, and take note of the \"Profile Path\". Mine is /home/murchu27/.config/BraveSoftware/Brave-Browser/Default (Linux). Your extension directory will be {Profile Path}/Extensions/{ID}/{some version number} . Mine is /home/murchu27/.config/BraveSoftware/Brave-Browser/Default/Extensions/bfhkfdnddlhfippjbflipboognpdpoeh/1.2.0_0 . Within the extension directory, replace any instances of https://internal.cloud.remarkable.com and https://webapp-production-dot-remarkable-production.appspot.com/ with the URL of your cloud (same as the STORAGE_URL used by the tablet). You will need to do this in manifest.json , and any of the .js files. If you are using Linux, you can save the below script as, e.g., rmfakecloud-patch.sh . mycloud=$1 find ./ -type f -exec sed -i \"s/https:\\/\\/internal.cloud.remarkable.com/$mycloud/g\" {} \\; find ./ -type f -exec sed -i \"s/https:\\/\\/webapp-production-dot-remarkable-production.appspot.com/$mycloud/g\" {} \\; Make this script executable with chmod +x rmfakecloud-patch.sh . Run the script, passing in the URL of your cloud, e.g., ./rmfakecloud-patch.sh http://mycloud.com . Reload the extension in your browser: Go to chrome://extensions in your browser. Enable \"Developer mode\" using the toggle at the top right. Click the newly appeared \"Load unpacked\" button, a dialogue box will open. Navigate to the extension directory (the same one as in the step above), and click \"Open\". Try using the extension. Webpages should be sent to your tablet! See #67 for the original discussion of this feature.","title":"Browser Extension Support"},{"location":"install/configuration/","text":"The configuration is made through environment variables. General configuration Variable name Description JWT_SECRET_KEY The secret key used to sign the authentication token. If you don't provide it, a random secret is generated, invalidating all connections established previously to be closed. A good secret is for example: openssl rand -base64 48 STORAGE_URL It controls whether file upload/download goes through the local proxy or to an external server. It's the full address (protocol, host, port, path) of rmfakecloud as visible from the tablet , especially if the host is behind a reverse proxy or in a container. Example: http://192.168.2.3:3000 (default: https://local.appspot.com ) PORT listening port number (default: 3000) DATADIR Set data/files directory (default: data/ in current dir) LOGLEVEL Set the log verbosity. Default is info , set to debug for more logging or warn , error for less RM_HTTPS_COOKIE For the UI, force cookies to be available only via https RM_TRUST_PROXY Trust the proxy for client ip addresses (X-Forwarded-For/X-Real-IP) default false Handwriting recognition To use the handwriting recognition feature, you need first to create a free account on https://developer.myscript.com/ (up to 2000 free recognitions per month). Then you'll obtains an application key and its corresponding HMAC to give to rmfakecloud: Variable name Description RMAPI_HWR_APPLICATIONKEY Application key obtained from myscript RMAPI_HWR_HMAC HMAC obtained from myscript Email settings Warning STARTTLS has not been tested Port 465 is most likely the one to use instead of 587, if your provider supports it. To be able to send email from your reMarkable, fill the following variables: Variable name Description RM_SMTP_SERVER The SMTP server address in host:port format RM_SMTP_USERNAME The username/email for login RM_SMTP_PASSWORD Plaintext password (application password should work) RM_SMTP_FROM Custom From: header for the mails (eg. 'ReMarkable self-hosted remarkable@my.example.net ') RM_SMTP_HELO Custom HELO, if your email provider needs it RM_SMTP_NOTLS don't use tls RM_SMTP_STARTTLS use starttls command, should be combined with NOTLS RM_SMTP_INSECURE_TLS If set, don't check the server certificate (not recommended)","title":"Configuration"},{"location":"install/configuration/#general-configuration","text":"Variable name Description JWT_SECRET_KEY The secret key used to sign the authentication token. If you don't provide it, a random secret is generated, invalidating all connections established previously to be closed. A good secret is for example: openssl rand -base64 48 STORAGE_URL It controls whether file upload/download goes through the local proxy or to an external server. It's the full address (protocol, host, port, path) of rmfakecloud as visible from the tablet , especially if the host is behind a reverse proxy or in a container. Example: http://192.168.2.3:3000 (default: https://local.appspot.com ) PORT listening port number (default: 3000) DATADIR Set data/files directory (default: data/ in current dir) LOGLEVEL Set the log verbosity. Default is info , set to debug for more logging or warn , error for less RM_HTTPS_COOKIE For the UI, force cookies to be available only via https RM_TRUST_PROXY Trust the proxy for client ip addresses (X-Forwarded-For/X-Real-IP) default false","title":"General configuration"},{"location":"install/configuration/#handwriting-recognition","text":"To use the handwriting recognition feature, you need first to create a free account on https://developer.myscript.com/ (up to 2000 free recognitions per month). Then you'll obtains an application key and its corresponding HMAC to give to rmfakecloud: Variable name Description RMAPI_HWR_APPLICATIONKEY Application key obtained from myscript RMAPI_HWR_HMAC HMAC obtained from myscript","title":"Handwriting recognition"},{"location":"install/configuration/#email-settings","text":"Warning STARTTLS has not been tested Port 465 is most likely the one to use instead of 587, if your provider supports it. To be able to send email from your reMarkable, fill the following variables: Variable name Description RM_SMTP_SERVER The SMTP server address in host:port format RM_SMTP_USERNAME The username/email for login RM_SMTP_PASSWORD Plaintext password (application password should work) RM_SMTP_FROM Custom From: header for the mails (eg. 'ReMarkable self-hosted remarkable@my.example.net ') RM_SMTP_HELO Custom HELO, if your email provider needs it RM_SMTP_NOTLS don't use tls RM_SMTP_STARTTLS use starttls command, should be combined with NOTLS RM_SMTP_INSECURE_TLS If set, don't check the server certificate (not recommended)","title":"Email settings"},{"location":"install/docker/","text":"You can evaluate the program with: docker run -it --rm -p 3000:3000 ddvk/rmfakecloud To setup it for its exploitation, you'll use need to setup a volume (it will contain user configuration and synchronized documents): docker run -it --rm -p 3000:3000 -v ./data:/data -e JWT_SECRET_KEY='something' ddvk/rmfakecloud Explore others configuration variables on the dedicated page . docker-compose file version: \"3\" services: rmfakecloud: image: ddvk/rmfakecloud container_name: rmfakecloud restart: unless-stopped env_file: - env volumes: - ./data:/data A env file is needed where all of the environmental variables are defined. Using the environment: option in the compose file is also valid and everything is in one file. For the possible environment variables, please have a look in the configuration section. Rebuild the image You can use the script dockerbuild.sh or there is a make rule: make docker","title":"With Docker"},{"location":"install/docker/#docker-compose-file","text":"version: \"3\" services: rmfakecloud: image: ddvk/rmfakecloud container_name: rmfakecloud restart: unless-stopped env_file: - env volumes: - ./data:/data A env file is needed where all of the environmental variables are defined. Using the environment: option in the compose file is also valid and everything is in one file. For the possible environment variables, please have a look in the configuration section.","title":"docker-compose file"},{"location":"install/docker/#rebuild-the-image","text":"You can use the script dockerbuild.sh or there is a make rule: make docker","title":"Rebuild the image"},{"location":"install/fail2ban/","text":"Fail2ban For a public server fail2ban adds some security by banning ip's after few (configurable) failed login attempts. Assuming rmfakecloud is running in docker via systemd and logs to the syslog (journalctl) and fail2ban is already installed and setup. Instructions install and setup fail2ban in the documentation of the used operating system or at https://github.com/fail2ban/fail2ban#installation . rmfakecloud needs to trust the reverse proxy in use, i.e. add RM_TRUST_PROXY=1 to the docker environment, see configuration . Jail First it is necessary to define a jail, e.g. in /etc/fail2ban/jail.local : [rmfakecloud] enabled = true filter = rmfakecloud action = iptables-multiport[name=HTTP, port=\"http,https\"] journalmatch = _SYSTEMD_UNIT=docker-rmfakecloud.service where it is necessary to change \"docker-rmfakecloud.service\" to the name of the systemd service used to run the server and the ban action appropriate to the setup of the host. Filter Additionally the filter [Definition] failregex = ^.*, login failed ip:\\s+<ADDR>.*$ in /etc/fail2ban/filter.d/rmfakecloud.conf tells fail2ban which lines are relevant. After creating the necessary configuration, restarting fail2ban loads the changes.","title":"Fail2ban"},{"location":"install/fail2ban/#fail2ban","text":"For a public server fail2ban adds some security by banning ip's after few (configurable) failed login attempts. Assuming rmfakecloud is running in docker via systemd and logs to the syslog (journalctl) and fail2ban is already installed and setup. Instructions install and setup fail2ban in the documentation of the used operating system or at https://github.com/fail2ban/fail2ban#installation . rmfakecloud needs to trust the reverse proxy in use, i.e. add RM_TRUST_PROXY=1 to the docker environment, see configuration .","title":"Fail2ban"},{"location":"install/fail2ban/#jail","text":"First it is necessary to define a jail, e.g. in /etc/fail2ban/jail.local : [rmfakecloud] enabled = true filter = rmfakecloud action = iptables-multiport[name=HTTP, port=\"http,https\"] journalmatch = _SYSTEMD_UNIT=docker-rmfakecloud.service where it is necessary to change \"docker-rmfakecloud.service\" to the name of the systemd service used to run the server and the ban action appropriate to the setup of the host.","title":"Jail"},{"location":"install/fail2ban/#filter","text":"Additionally the filter [Definition] failregex = ^.*, login failed ip:\\s+<ADDR>.*$ in /etc/fail2ban/filter.d/rmfakecloud.conf tells fail2ban which lines are relevant. After creating the necessary configuration, restarting fail2ban loads the changes.","title":"Filter"},{"location":"install/helm/","text":"Install with Helm You will need to clone the repo : git clone https://github.com/ddvk/rmfakecloud && cd rmfakecloud/helm Modify your variables just like a simple docker-compose ```sh vim values.yml Install the helm chart helm install myrmfakecloud . Create first user Create your first user using kubectl exec: export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"rmfakecloud.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\") kubectl exec $POD_NAME -- /rmfakecloud-docker setuser -u ddvk -a (You may need to restart the pod) You can reset a password with : export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"rmfakecloud.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\") kubectl exec $POD_NAME -- /rmfakecloud-docker setuser -u ddvk -p \"${NEWPASSWD}\"","title":"Helm"},{"location":"install/helm/#install-with-helm","text":"You will need to clone the repo : git clone https://github.com/ddvk/rmfakecloud && cd rmfakecloud/helm Modify your variables just like a simple docker-compose ```sh vim values.yml Install the helm chart helm install myrmfakecloud .","title":"Install with Helm"},{"location":"install/helm/#create-first-user","text":"Create your first user using kubectl exec: export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"rmfakecloud.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\") kubectl exec $POD_NAME -- /rmfakecloud-docker setuser -u ddvk -a (You may need to restart the pod) You can reset a password with : export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"rmfakecloud.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\") kubectl exec $POD_NAME -- /rmfakecloud-docker setuser -u ddvk -p \"${NEWPASSWD}\"","title":"Create first user"},{"location":"install/source/","text":"Building Dependencies To be able to compile from source, you'll need the following dependencies: nodejs version 16 at most yarn go version 1.16 at least make Build git clone https://github.com/ddvk/rmfakecloud cd rmfakecloud make all Installing Copy the rmfakecloud binary for your system from the dist folder to /usr/local/bin and rename it to rmfakecloud e.g. cp dist/rmfakecloud-x64 /usr/local/bin/rmfakecloud or scp dist/rmfakecloud-armv7 raspberry:/usr/local/bin/rmfakecloud Setup the service to run with your init system. See below for examples Create and modify the configuration file. See below for examples Create the library folder you specified in your configuration file. e.g. mkdir /usr/local/lib/rmfakecloud Enable and start the service with your init system. e.g. rc-update add rmfakecloud && service start rmfakecloud or systemctl enable --now rmfakecloud Init System Examples OpenRC /etc/init.d/rmfakecloud #!/sbin/openrc-run name=\"rmfakecloud\" command=\"/usr/local/bin/rmfakecloud\" command_args=\"\" pidfile=\"/var/run/rmfakecloud.pid\" command_background=\"yes\" output_log=\"/var/log/messages\" error_log=\"/var/log/messages\" depend() { need net localmount } /etc/conf.d/rmfakecloud # Basic settings export JWT_SECRET_KEY=SOME_KEY export STORAGE_URL=http(s)://host.where.rmfakecloud.is.running export PORT=80 export DATADIR=/usr/local/lib/rmfakecloud export LOGLEVEL=info # uncomment if using TLS #export PORT=443 #export TLS_KEY=/path/to/somekey #export TLS_CERT=/path/to/somecert #export RM_HTTPS_COOKIE=1 # Email export RM_SMTP_SERVER=smtp.gmail.com:465 export RM_SMTP_USERNAME=MY_EMAIL_ADDRESS export RM_SMTP_PASSWORD=MY_PASSWORD # Handwriting recognition export RMAPI_HWR_APPLICATIONKEY=SOME_KEY export RMAPI_HWR_HMAC=SOME_KEY Make sure to replace SOME_KEY by the return of openssl rand -base64 48 , see configuration . systemd rmfakecloud.service [Unit] Description=rmfakecloud After=network-online.target Wants=network-online.target [Service] ExecStart=/usr/local/bin/rmfakecloud EnvironmentFile=/etc/rmfakecloud.conf [Install] WantedBy=multi-user.target rmfakecloud.conf JWT_SECRET_KEY=SOME_KEY STORAGE_URL=http(s)://host.where.rmfakecloud.is.running PORT=80 DATADIR=/usr/local/lib/rmfakecloud LOGLEVEL=info # uncomment if using TLS #PORT=443 #TLS_KEY=/path/to/somekey #TLS_CERT=/path/to/somecert #RM_HTTPS_COOKIE=1 # Email RM_SMTP_SERVER=smtp.gmail.com:465 RM_SMTP_USERNAME=MY_EMAIL_ADDRESS RM_SMTP_PASSWORD=MY_PASSWORD # Handwriting recognition RMAPI_HWR_APPLICATIONKEY=SOME_KEY RMAPI_HWR_HMAC=SOME_KEY Make sure to replace SOME_KEY with the output of openssl rand -base64 48 , see configuration .","title":"From Source"},{"location":"install/source/#building","text":"","title":"Building"},{"location":"install/source/#dependencies","text":"To be able to compile from source, you'll need the following dependencies: nodejs version 16 at most yarn go version 1.16 at least make","title":"Dependencies"},{"location":"install/source/#build","text":"git clone https://github.com/ddvk/rmfakecloud cd rmfakecloud make all","title":"Build"},{"location":"install/source/#installing","text":"Copy the rmfakecloud binary for your system from the dist folder to /usr/local/bin and rename it to rmfakecloud e.g. cp dist/rmfakecloud-x64 /usr/local/bin/rmfakecloud or scp dist/rmfakecloud-armv7 raspberry:/usr/local/bin/rmfakecloud Setup the service to run with your init system. See below for examples Create and modify the configuration file. See below for examples Create the library folder you specified in your configuration file. e.g. mkdir /usr/local/lib/rmfakecloud Enable and start the service with your init system. e.g. rc-update add rmfakecloud && service start rmfakecloud or systemctl enable --now rmfakecloud","title":"Installing"},{"location":"install/source/#init-system-examples","text":"","title":"Init System Examples"},{"location":"install/source/#openrc","text":"/etc/init.d/rmfakecloud #!/sbin/openrc-run name=\"rmfakecloud\" command=\"/usr/local/bin/rmfakecloud\" command_args=\"\" pidfile=\"/var/run/rmfakecloud.pid\" command_background=\"yes\" output_log=\"/var/log/messages\" error_log=\"/var/log/messages\" depend() { need net localmount } /etc/conf.d/rmfakecloud # Basic settings export JWT_SECRET_KEY=SOME_KEY export STORAGE_URL=http(s)://host.where.rmfakecloud.is.running export PORT=80 export DATADIR=/usr/local/lib/rmfakecloud export LOGLEVEL=info # uncomment if using TLS #export PORT=443 #export TLS_KEY=/path/to/somekey #export TLS_CERT=/path/to/somecert #export RM_HTTPS_COOKIE=1 # Email export RM_SMTP_SERVER=smtp.gmail.com:465 export RM_SMTP_USERNAME=MY_EMAIL_ADDRESS export RM_SMTP_PASSWORD=MY_PASSWORD # Handwriting recognition export RMAPI_HWR_APPLICATIONKEY=SOME_KEY export RMAPI_HWR_HMAC=SOME_KEY Make sure to replace SOME_KEY by the return of openssl rand -base64 48 , see configuration .","title":"OpenRC"},{"location":"install/source/#systemd","text":"rmfakecloud.service [Unit] Description=rmfakecloud After=network-online.target Wants=network-online.target [Service] ExecStart=/usr/local/bin/rmfakecloud EnvironmentFile=/etc/rmfakecloud.conf [Install] WantedBy=multi-user.target rmfakecloud.conf JWT_SECRET_KEY=SOME_KEY STORAGE_URL=http(s)://host.where.rmfakecloud.is.running PORT=80 DATADIR=/usr/local/lib/rmfakecloud LOGLEVEL=info # uncomment if using TLS #PORT=443 #TLS_KEY=/path/to/somekey #TLS_CERT=/path/to/somecert #RM_HTTPS_COOKIE=1 # Email RM_SMTP_SERVER=smtp.gmail.com:465 RM_SMTP_USERNAME=MY_EMAIL_ADDRESS RM_SMTP_PASSWORD=MY_PASSWORD # Handwriting recognition RMAPI_HWR_APPLICATIONKEY=SOME_KEY RMAPI_HWR_HMAC=SOME_KEY Make sure to replace SOME_KEY with the output of openssl rand -base64 48 , see configuration .","title":"systemd"},{"location":"install/reverse-proxy/apache/","text":"From discord/xabean#2732 | github.com/warewolf client: rM2, Toltec, rmfakecloud installed via opkg. Follow the device installation instructions here: https://ddvk.github.io/rmfakecloud/remarkable/setup/ server: rmfakecloud docker image, docker-compose.yml + env How I setup rmfakecloud for myself General steps: Add a 'remarkable' user on my VPS I already had an existing wildcard *.mydomain.com LetsEncrypt certificate I su -s /bin/bash remarkable to become the remarkable user Then mkdir rmfakecloud; cd rmfakecloud Next, mkdir data for where rmfakecloud will store the data Create docker-compose.yml and env files (copy and change contents from below) Run docker-compose up to launch it in your terminal - you will need to hit Ctrl-C to stop it later Add apache config below to your apache's conf.d directory, or sites-enabled directory, depending on your OS Run apachectl configtest to make sure your apache config works Run apachecctl graceful to restart the webserver Try browsing to https://rmfakecloud.mydomain.com and make sure you see the rmfakecloud login page Add yourself a user: docker exec rmfakecloud /rmfakecloud-docker setuser -u UserNameHere -a -- this will print out to the screen a randomly generated password Log in as your username with the password it gave you, you can change it via the web UI later Click 'code' in the top to generate your cloud link code. On your rM2, go Menu -> Settings -> General -> Account -> Connect Enter your cloud link code from your rmfakecloud web UI Documents should now start syncing, you should see stuff scrolling by in your docker-compose up window. Let it go for a while until it finishes. Make sure the cloud icon to the right of the wifi icon in the bottom left of the main \"my files\" screen on your rM2 tablet doesn't have an X saying the cloud is broken Hit Ctrl-C in your docker-compose up window to stop your rmfakecloud, we're done testing Run docker-compose up -d to have it run in the background like a service Hopefully at this point, everything works? Docker docker-compose.yml: version: \"3.4\" services: rmfakecloud: network_mode: host image: ddvk/rmfakecloud container_name: rmfakecloud restart: unless-stopped ports: - 3000:3000 env_file: - env volumes: - /home/remarkable/rmfakecloud/data:/data network_mode: host so that the docker container can reach my mail server env: RMAPI_HWR_APPLICATIONKEY=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX RMAPI_HWR_HMAC=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX STORAGE_URL=https://rmfakecloud.mydomain.com PORT=3000 LOGLEVEL=debug RM_SMTP_SERVER=127.0.0.1:465 RM_SMTP_USERNAME= RM_SMTP_PASSWORD= RM_SMTP_FROM=ReMarkable selfhosted <rmfakecloud@mydomain.com> JWT_SECRET_KEY=YouReallyShouldSetThisInConfigAndNotLeaveItThisStaticValueExampl RM_SMTP_INSECURE_TLS=true JWT_SECRET_KEY - set this in config, othrewise every time your server goes up/down Apache rmfakecloud.conf: LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_http_module modules/mod_proxy_http.so <VirtualHost rmfakecloud.mydomain.com> ServerName rmfakecloud.mydomain.com SSLEngine on SSLCertificateFile /etc/httpd/conf/ssl.key/mydomain.com-fullchain.pem SSLCertificateKeyFile /etc/httpd/conf/ssl.key/mydomain.com-cert.pem ProxyPass / http://localhost:3000/ ProxyPassReverse / http://localhost:3000/ ProxyRequests Off RewriteEngine on RewriteCond %{HTTP:Upgrade} websocket [NC] RewriteCond %{HTTP:Connection} upgrade [NC] RewriteRule ^/?(.*) \"ws://localhost:3000/$1\" [P,L] </VirtualHost>","title":"Apache"},{"location":"install/reverse-proxy/apache/#how-i-setup-rmfakecloud-for-myself","text":"General steps: Add a 'remarkable' user on my VPS I already had an existing wildcard *.mydomain.com LetsEncrypt certificate I su -s /bin/bash remarkable to become the remarkable user Then mkdir rmfakecloud; cd rmfakecloud Next, mkdir data for where rmfakecloud will store the data Create docker-compose.yml and env files (copy and change contents from below) Run docker-compose up to launch it in your terminal - you will need to hit Ctrl-C to stop it later Add apache config below to your apache's conf.d directory, or sites-enabled directory, depending on your OS Run apachectl configtest to make sure your apache config works Run apachecctl graceful to restart the webserver Try browsing to https://rmfakecloud.mydomain.com and make sure you see the rmfakecloud login page Add yourself a user: docker exec rmfakecloud /rmfakecloud-docker setuser -u UserNameHere -a -- this will print out to the screen a randomly generated password Log in as your username with the password it gave you, you can change it via the web UI later Click 'code' in the top to generate your cloud link code. On your rM2, go Menu -> Settings -> General -> Account -> Connect Enter your cloud link code from your rmfakecloud web UI Documents should now start syncing, you should see stuff scrolling by in your docker-compose up window. Let it go for a while until it finishes. Make sure the cloud icon to the right of the wifi icon in the bottom left of the main \"my files\" screen on your rM2 tablet doesn't have an X saying the cloud is broken Hit Ctrl-C in your docker-compose up window to stop your rmfakecloud, we're done testing Run docker-compose up -d to have it run in the background like a service Hopefully at this point, everything works?","title":"How I setup rmfakecloud for myself"},{"location":"install/reverse-proxy/apache/#docker","text":"docker-compose.yml: version: \"3.4\" services: rmfakecloud: network_mode: host image: ddvk/rmfakecloud container_name: rmfakecloud restart: unless-stopped ports: - 3000:3000 env_file: - env volumes: - /home/remarkable/rmfakecloud/data:/data network_mode: host so that the docker container can reach my mail server env: RMAPI_HWR_APPLICATIONKEY=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX RMAPI_HWR_HMAC=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX STORAGE_URL=https://rmfakecloud.mydomain.com PORT=3000 LOGLEVEL=debug RM_SMTP_SERVER=127.0.0.1:465 RM_SMTP_USERNAME= RM_SMTP_PASSWORD= RM_SMTP_FROM=ReMarkable selfhosted <rmfakecloud@mydomain.com> JWT_SECRET_KEY=YouReallyShouldSetThisInConfigAndNotLeaveItThisStaticValueExampl RM_SMTP_INSECURE_TLS=true JWT_SECRET_KEY - set this in config, othrewise every time your server goes up/down","title":"Docker"},{"location":"install/reverse-proxy/apache/#apache","text":"rmfakecloud.conf: LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_http_module modules/mod_proxy_http.so <VirtualHost rmfakecloud.mydomain.com> ServerName rmfakecloud.mydomain.com SSLEngine on SSLCertificateFile /etc/httpd/conf/ssl.key/mydomain.com-fullchain.pem SSLCertificateKeyFile /etc/httpd/conf/ssl.key/mydomain.com-cert.pem ProxyPass / http://localhost:3000/ ProxyPassReverse / http://localhost:3000/ ProxyRequests Off RewriteEngine on RewriteCond %{HTTP:Upgrade} websocket [NC] RewriteCond %{HTTP:Connection} upgrade [NC] RewriteRule ^/?(.*) \"ws://localhost:3000/$1\" [P,L] </VirtualHost>","title":"Apache"},{"location":"install/reverse-proxy/nginx/","text":"From @zeigerpuppy I have rmfakecloud up and running (reMarkable 2 client, Debian 9 server). It's working great, sync, emails and handwriting recognition are all good. I am using the local proxy config and have now tested a working HTTPS connection for increased security (comments appreciated). Currently, my understanding is that in the default config, the proxy is just establishing an HTTP proxy connection as the rmfakecloud is served on http://server:3000. I would like to have this working on public IP networks too and have set up a NAT rule to forward port 3000 to my local server. This works but I guess it's all unencrypted. note that once HTTPS is working, direct forwarding of port 3000 should be disabled! So, to get it working via HTTPS, I think all we need to do is to set up a reverse HTTPS proxy on the server. NB: I initially tried this with Apache2 but couldn't get the websockets working . The error on the server was this: INFO[0387] accepting websocket abc INFO[0387] upgrade:websocket: the client is not using the websocket protocol: 'upgrade' token not found in 'Connection' header INFO[0387] closing the ws INFO[0387] [GIN] 2020/11/17 - 13:39:41 | 400 | 201.78\u00b5s | 127.0.0.1 | GET \"/notifications/ws/json/1\" So, I tried with an nginx reverse proxy with the following config: server { # increase max request size (for large PDFs) client_max_body_size 200M; server_name rmfakecloud.server.net; listen 443 ssl; # managed by Certbot ssl_certificate /etc/letsencrypt/live/rmfakecloud.server.net/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/rmfakecloud.server.net/privkey.pem; # managed by Certbot include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot location / { proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $host; proxy_pass http://localhost:3000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_read_timeout 1d; proxy_send_timeout 1d; } } } That seems to work well. There were two other config changes to make: set the STORAGE_URL on the server: export STORAGE_URL=https://rmfakecloud.server.net change the proxy URL on the device: stop services systemctl stop xochitl systemctl stop proxy edit the proxy address nano /etc/systemd/system/proxy.service change the line ExecStart to have the new address ... ExecStart=/home/root/scripts/rmfakecloud/secure -cert /home/root/scripts/rmfakecloud/proxy.crt -key /home/root/scripts/rmfakecloud/proxy.key https://rmfakecloud.server.net ... reload and start services systemctl daemon-reload systemctl start proxy systemctl start xochitl I think this is all good, happy to hear feedback but I think we should amend a section on the README to show how to configure with HTTPS. Now, the only thing needed is starting the server automatically....","title":"Nginx"},{"location":"install/reverse-proxy/traefik/","text":"Coming Soon","title":"Traefik"},{"location":"install/reverse-proxy/traefik/#coming-soon","text":"","title":"Coming Soon"},{"location":"remarkable/https/","text":"Now you can run TLS directly on rmfakecloud: TLS_CERT=somecert TLS_KEY=somecertkey","title":"HTTPS"},{"location":"remarkable/setup/","text":"Device Setup There are several ways to make it work, choose whatever works for you Important Whenever the tablet receives a system update, the cloud connection will break, and will have to be reenabled . Automatic toltec Install using toltec . opkg install rmfakecloud-proxy rmfakecloudctl set-upstream <URL> rmfakecloudctl enable The <URL> above has to be the same as in the STORAGE_URL server configuration. rmfakecloud-proxy script Get the installer from: rmfakecloud-proxy or run the automagic: sh -c \"$(wget https://raw.githubusercontent.com/ddvk/rmfakecloud/master/scripts/device/automagic.sh -O-)\" Manual Installing a proxy on devices A reverse proxy rmfakecloud-proxy has to be installed run rmfakecloud on whichever port you want, you can use either HTTP (not recommended) or HTTPS, generate a new cert for the url you chose e.g with Let's Encrypt Steps (done by the automagic scripts): generate a CA and host certificate for *.appspot.com create the CA folder: mkdir -p /usr/local/share/ca-certificates copy the CA.crt file to /usr/local/share/ca-certificates and run update-ca-certificates modify the hosts file /etc/hosts Run a reverse https proxy on the rm tablet as a service, e.g. secure , stop xochitl systemctl stop xochitl add the followint entries to /etc/hosts 127.0.0.1 hwr-production-dot-remarkable-production.appspot.com 127.0.0.1 service-manager-production-dot-remarkable-production.appspot.com 127.0.0.1 local.appspot.com 127.0.0.1 my.remarkable.com 127.0.0.1 ping.remarkable.com 127.0.0.1 internal.cloud.remarkable.com set the address of your api host:port in the reverse proxy secure -cert proxy.crt -key proxy.key http(s)://host_where_the_api_is_running:someport or use the provided systemd unit file and put the config in proxycfg set the STORAGE_URL to point to this address (this thing the device can resolve/see e.g the reverse proxy, public dns etc) run the host run fixsync.sh on the device to mark all files as new (not to be deleted from the device) start xochitl systemctl start xochitl Windows/Mac Desktop Client: modify the hosts file ( \\system32\\drivers\\etc\\hosts ) add the same entries as on the tablet run a reverse proxy on the host or somewhere else pointing it to rmfakecloud with the same certs profit PROS : easy setup, you can use whichever port you want, you can get a real trusted ca cert from let's encrypt, if running in a trusted network you may chose to use HTTP CONS : you have to configure HTTPS on the host yourself, additional Desktop config Modify device /etc/hosts Connect to the host directly, without a reverse proxy, with HTTPS on :443 Steps: generate the certs from Variant 1, you get them (proxy.crt, proxy.key, ca.crt) and trust the ca.crt run rmfakecloud with: TLS_KEY=proxy.key TLS_CERT=proxy.crt STORAGE_URL=https://local.apphost.com modify /etc/hosts but use the rmfakecloud's ip instead of 127.0.0.1 Windows/Mac Desktop Client: trust the ca.crt (add it to Trusted Root CA, use cert.msc) modify the hosts file ( \\system32\\drivers\\etc\\hosts ) add the same entries as on the tablet profit PROS : you can use the Windows/Mac clients, no need for a proxy on the device CONS : a bit harder to setup, each host has to trust the ca and modify the hosts file, you have to use port 443 Edit router DNS entries Same as the previous method , but instead of modifying any hosts file, make the changes on your DNS/router: add the host entries directly on your router (Hosts in OpenWRT) trust the ca.crt profit PROS : a bit easier, you can you even the mobile apps if you manage to install the root ca CONS : you can't use the official cloud anymore due to the mangled DNS Reenabling after a system update Navigate to whatever directory the proxy was downloaded to on your device. If you installed using the rmfakecloud-proxy script, this will likely be ~/rmfakecloud/ . Run the below commands to reinstall the proxy service, which should reenable your cloud connection. # stop services systemctl stop xochitl systemctl stop proxy # reinstall the proxy service ./installer.sh uninstall ./installer.sh install # restart services systemctl daemon-reload systemctl start proxy systemctl start xochitl Login After you installed the proxy, you will need to login to your account on your device. Click Menu > General > Account . Click on Setup Account . On your main computer: Login to the rmfakecloud Web UI (if no proxy used, the same as the STORAGE_URL value in the server configuration). Press the Code link in the menu. Press the Generate Code button. Enter the shown code on your device. To check that sync is working correctly. Go to Menu > Storage and press Check Sync .","title":"Device"},{"location":"remarkable/setup/#device-setup","text":"There are several ways to make it work, choose whatever works for you Important Whenever the tablet receives a system update, the cloud connection will break, and will have to be reenabled .","title":"Device Setup"},{"location":"remarkable/setup/#automatic","text":"","title":"Automatic"},{"location":"remarkable/setup/#toltec","text":"Install using toltec . opkg install rmfakecloud-proxy rmfakecloudctl set-upstream <URL> rmfakecloudctl enable The <URL> above has to be the same as in the STORAGE_URL server configuration.","title":"toltec"},{"location":"remarkable/setup/#rmfakecloud-proxy-script","text":"Get the installer from: rmfakecloud-proxy or run the automagic: sh -c \"$(wget https://raw.githubusercontent.com/ddvk/rmfakecloud/master/scripts/device/automagic.sh -O-)\"","title":"rmfakecloud-proxy script"},{"location":"remarkable/setup/#manual","text":"","title":"Manual"},{"location":"remarkable/setup/#installing-a-proxy-on-devices","text":"A reverse proxy rmfakecloud-proxy has to be installed run rmfakecloud on whichever port you want, you can use either HTTP (not recommended) or HTTPS, generate a new cert for the url you chose e.g with Let's Encrypt Steps (done by the automagic scripts): generate a CA and host certificate for *.appspot.com create the CA folder: mkdir -p /usr/local/share/ca-certificates copy the CA.crt file to /usr/local/share/ca-certificates and run update-ca-certificates modify the hosts file /etc/hosts Run a reverse https proxy on the rm tablet as a service, e.g. secure , stop xochitl systemctl stop xochitl add the followint entries to /etc/hosts 127.0.0.1 hwr-production-dot-remarkable-production.appspot.com 127.0.0.1 service-manager-production-dot-remarkable-production.appspot.com 127.0.0.1 local.appspot.com 127.0.0.1 my.remarkable.com 127.0.0.1 ping.remarkable.com 127.0.0.1 internal.cloud.remarkable.com set the address of your api host:port in the reverse proxy secure -cert proxy.crt -key proxy.key http(s)://host_where_the_api_is_running:someport or use the provided systemd unit file and put the config in proxycfg set the STORAGE_URL to point to this address (this thing the device can resolve/see e.g the reverse proxy, public dns etc) run the host run fixsync.sh on the device to mark all files as new (not to be deleted from the device) start xochitl systemctl start xochitl Windows/Mac Desktop Client: modify the hosts file ( \\system32\\drivers\\etc\\hosts ) add the same entries as on the tablet run a reverse proxy on the host or somewhere else pointing it to rmfakecloud with the same certs profit PROS : easy setup, you can use whichever port you want, you can get a real trusted ca cert from let's encrypt, if running in a trusted network you may chose to use HTTP CONS : you have to configure HTTPS on the host yourself, additional Desktop config","title":"Installing a proxy on devices"},{"location":"remarkable/setup/#modify-device-etchosts","text":"Connect to the host directly, without a reverse proxy, with HTTPS on :443 Steps: generate the certs from Variant 1, you get them (proxy.crt, proxy.key, ca.crt) and trust the ca.crt run rmfakecloud with: TLS_KEY=proxy.key TLS_CERT=proxy.crt STORAGE_URL=https://local.apphost.com modify /etc/hosts but use the rmfakecloud's ip instead of 127.0.0.1 Windows/Mac Desktop Client: trust the ca.crt (add it to Trusted Root CA, use cert.msc) modify the hosts file ( \\system32\\drivers\\etc\\hosts ) add the same entries as on the tablet profit PROS : you can use the Windows/Mac clients, no need for a proxy on the device CONS : a bit harder to setup, each host has to trust the ca and modify the hosts file, you have to use port 443","title":"Modify device /etc/hosts"},{"location":"remarkable/setup/#edit-router-dns-entries","text":"Same as the previous method , but instead of modifying any hosts file, make the changes on your DNS/router: add the host entries directly on your router (Hosts in OpenWRT) trust the ca.crt profit PROS : a bit easier, you can you even the mobile apps if you manage to install the root ca CONS : you can't use the official cloud anymore due to the mangled DNS","title":"Edit router DNS entries"},{"location":"remarkable/setup/#reenabling-after-a-system-update","text":"Navigate to whatever directory the proxy was downloaded to on your device. If you installed using the rmfakecloud-proxy script, this will likely be ~/rmfakecloud/ . Run the below commands to reinstall the proxy service, which should reenable your cloud connection. # stop services systemctl stop xochitl systemctl stop proxy # reinstall the proxy service ./installer.sh uninstall ./installer.sh install # restart services systemctl daemon-reload systemctl start proxy systemctl start xochitl","title":"Reenabling after a system update"},{"location":"remarkable/setup/#login","text":"After you installed the proxy, you will need to login to your account on your device. Click Menu > General > Account . Click on Setup Account . On your main computer: Login to the rmfakecloud Web UI (if no proxy used, the same as the STORAGE_URL value in the server configuration). Press the Code link in the menu. Press the Generate Code button. Enter the shown code on your device. To check that sync is working correctly. Go to Menu > Storage and press Check Sync .","title":"Login"},{"location":"usage/diff-sync/","text":"Since the reMarkable 2.10 release, there is a new sync method available: It collects only differences instead of uploading the whole document. So it takes less time to upload/download large modified documents, and it handles edition conflicts. Note This feature is available since rmfakecloud v0.0.5. In order to use this feature, you'll need to update your user to activate it: rmfakecloud setuser -u ddvk -a -s The -a is to let/set the user admin: as the tool will remove the admin permission if not set. You'll then need to reconnect on your device to apply the settings, and a full resync will automatically begin.","title":"Diff Sync"},{"location":"usage/integrations/","text":"Integration is the feature added in reMarkable 2.10 that allows to browse, download and upload document from location outside of the tablet. Warning Integrations are still work in progress, no UI exists yet. WebDAV It can be used with any WebDAV services, for example a Nextcloud/Owncloud instance. Add this to your .userprofile : integrations: - provider: webdav id: [generate some uuid] name: [some name] username: [username] password: [password] address: [webdavaddrss] insecure: [true/false] (to skip certificate checks) For example: integrations: - provider: webdav id: fLAME8YBm5uFJ89GKRAFkGjk7hJw0heow045kfhc name: Home Nextcloud address: https://home.example.com/remote.php/dav/files/user42/ username: user42 password: password4242 Local File System Warning Experimental and not suited for multiple users yet You can share a dedicated path on your system. This can be a simple directory or a mount point using FUSE or whatever. Add this to your .userprofile : integrations: - provider: localfs id: [generate some uuid] name: [some name] path: /some/path/with/files","title":"Integrations"},{"location":"usage/integrations/#webdav","text":"It can be used with any WebDAV services, for example a Nextcloud/Owncloud instance. Add this to your .userprofile : integrations: - provider: webdav id: [generate some uuid] name: [some name] username: [username] password: [password] address: [webdavaddrss] insecure: [true/false] (to skip certificate checks) For example: integrations: - provider: webdav id: fLAME8YBm5uFJ89GKRAFkGjk7hJw0heow045kfhc name: Home Nextcloud address: https://home.example.com/remote.php/dav/files/user42/ username: user42 password: password4242","title":"WebDAV"},{"location":"usage/integrations/#local-file-system","text":"Warning Experimental and not suited for multiple users yet You can share a dedicated path on your system. This can be a simple directory or a mount point using FUSE or whatever. Add this to your .userprofile : integrations: - provider: localfs id: [generate some uuid] name: [some name] path: /some/path/with/files","title":"Local File System"},{"location":"usage/userprofile/","text":"Have a look inside data directory ( DATADIR ): you'll find under data/users/ a directory by user (since v0.0.3). The directory name is expected to be the username given in the webUI login form. User Settings rmfakecloud stores user configuration (password, email, options, ...) in a file inside its directory, named .userprofile . This is a hidden file. This file, written in YAML, have the following relevant entries: Entry Description password Password to access the account (in Argon2 format) name Name displayed in the webui isadmin Boolean indicating if the user can perform administration tasks (currently managing user accounts) sync15 Boolean value that indicates if the user is using the diff synchronization (aka. sync 1.5) integrations Array with the user integrations. See Integrations Edit settings through CLI Use the same binary as for launching the server: it takes some specials commands described bellow. When using the Docker image, you can run : docker exec rmfakecloud /rmfakecloud-docker special-command rmfakecloud listusers This commands lists existing users. rmfakecloud setuser This commands edit or create account. To create/update an admin account ddvk : rmfakecloud setuser -u ddvk -a To reset a password: read -s -p \"New password: \" NEWPASSWD && rmfakecloud setuser -u ddvk -p \"${NEWPASSWD}\" Directory Structure In a user directory, there are files like [UUID].metadata and [UUID].zip (if you are not using sync 1.5 ): this corresponds to your raw documents on your tablet. There is also a trash directory, containing deleted files on the tablet, in its trash. If you are using sync 1.5 , the magic happen in the sync directory.","title":"User Profile"},{"location":"usage/userprofile/#user-settings","text":"rmfakecloud stores user configuration (password, email, options, ...) in a file inside its directory, named .userprofile . This is a hidden file. This file, written in YAML, have the following relevant entries: Entry Description password Password to access the account (in Argon2 format) name Name displayed in the webui isadmin Boolean indicating if the user can perform administration tasks (currently managing user accounts) sync15 Boolean value that indicates if the user is using the diff synchronization (aka. sync 1.5) integrations Array with the user integrations. See Integrations","title":"User Settings"},{"location":"usage/userprofile/#edit-settings-through-cli","text":"Use the same binary as for launching the server: it takes some specials commands described bellow. When using the Docker image, you can run : docker exec rmfakecloud /rmfakecloud-docker special-command","title":"Edit settings through CLI"},{"location":"usage/userprofile/#rmfakecloud-listusers","text":"This commands lists existing users.","title":"rmfakecloud listusers"},{"location":"usage/userprofile/#rmfakecloud-setuser","text":"This commands edit or create account. To create/update an admin account ddvk : rmfakecloud setuser -u ddvk -a To reset a password: read -s -p \"New password: \" NEWPASSWD && rmfakecloud setuser -u ddvk -p \"${NEWPASSWD}\"","title":"rmfakecloud setuser"},{"location":"usage/userprofile/#directory-structure","text":"In a user directory, there are files like [UUID].metadata and [UUID].zip (if you are not using sync 1.5 ): this corresponds to your raw documents on your tablet. There is also a trash directory, containing deleted files on the tablet, in its trash. If you are using sync 1.5 , the magic happen in the sync directory.","title":"Directory Structure"}]}